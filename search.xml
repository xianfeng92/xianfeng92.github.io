<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[handler]]></title>
      <url>/2017/10/19/handler/</url>
      <content type="html"><![CDATA[<h1 id="1-handler"><a href="#1-handler" class="headerlink" title="1 handler"></a>1 handler</h1><p>handler是Android给我们提供的一套更新UI的机制，也是一套消息处理机制。Android UI是线程不安全的，如果在子线程中尝试进行UI操作，程序就有可能会崩溃。通过创建一个Message对象，通过Handler发送出去，之后在Handler的handleMessage()方法中获得刚才发送的Message对象，然后在这里进行UI操作就不会再出现崩溃了。</p>
<p>在下面介绍handler机制前，首先得了解以下几个概念：</p>
<ul>
<li>Message，为线程间通讯的数据单元。例如后台线程在处理数据完毕后需要更新UI，则可发送一条包含更新信息的Message给UI线程。</li>
<li>Message Queue，用来存放通过Handler发布的消息，按照先进先出(FIFO)执行。</li>
<li>Handler是Message的主要处理者，在构建handler时候内部会跟Looper进行关联，通过Looper.myLooper()获取到Looper，找到Looper也就找到了MessageQueue。在handler中发送消息，其实就是向MessageQueue队列中发送消息。</li>
<li>Looper，扮演Message Queue和Handler之间桥梁的角色，每一个Looper内部都包含一个MessageQueue。Looper.loop()负责循环取出Message Queue里面的Message.然后Looper交付给相应的Handler进行处理。</li>
<li>UI thread 通常就是main thread，每一个线程里可含有一个Looper对象以及一个MessageQueue数据结构。</li>
</ul>
<p>Android官方给出的一个最标准的异步消息处理线程的写法应该是这样：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LooperThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;  </div><div class="line">      <span class="keyword">public</span> Handler mHandler;  </div><div class="line">  </div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </div><div class="line">          Looper.prepare();  <span class="comment">// step 1</span></div><div class="line"></div><div class="line">          mHandler = <span class="keyword">new</span> Handler() &#123;  <span class="comment">// step 2</span></div><div class="line">              <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;  <span class="comment">// step 3</span></div><div class="line">                  <span class="comment">// process incoming messages here  </span></div><div class="line">              &#125;  </div><div class="line">          &#125;;  </div><div class="line"></div><div class="line">          Looper.loop();  <span class="comment">// step 4</span></div><div class="line">      &#125;  </div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<ul>
<li>step1:Looper.prepare()方法的源码如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</div><div class="line">       prepare(<span class="keyword">true</span>);</div><div class="line">   &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (sThreadLocal.get() != <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Only one Looper may be created per thread"</span>);</div><div class="line">       &#125;</div><div class="line">       sThreadLocal.set(<span class="keyword">new</span> Looper(quitAllowed));</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>可以看到，首先判断sThreadLocal中是否已经存在Looper了，如果还没有则创建一个新的Looper设置进去。Looper对象的构造函数源码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">Looper</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</div><div class="line">    mQueue = <span class="keyword">new</span> MessageQueue(quitAllowed);</div><div class="line">    mRun = <span class="keyword">true</span>;</div><div class="line">    mThread = Thread.currentThread();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>从源码中可以看出，每一个Looper对象都关联着一个MessageQueue 对象，MessageQueue对象主要管理Handler发送来的消息。<br>以上可以看出每个线程中最多只会有一个Looper对象和一个MessageQueue对象。</p>
<ul>
<li>step2:  Handler的构造方法如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Callback callback, <span class="keyword">boolean</span> async)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (FIND_POTENTIAL_LEAKS) &#123;</div><div class="line">            <span class="keyword">final</span> Class&lt;? extends Handler&gt; klass = getClass();</div><div class="line">            <span class="keyword">if</span> ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &amp;&amp;</div><div class="line">                    (klass.getModifiers() &amp; Modifier.STATIC) == <span class="number">0</span>) &#123;</div><div class="line">                Log.w(TAG, <span class="string">"The following Handler class should be static or leaks might occur: "</span> +</div><div class="line">                    klass.getCanonicalName());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        mLooper = Looper.myLooper();</div><div class="line">        <span class="keyword">if</span> (mLooper == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">                <span class="string">"Can't create handler inside thread that has not called Looper.prepare()"</span>);</div><div class="line">        &#125;</div><div class="line">        mQueue = mLooper.mQueue;</div><div class="line">        mCallback = callback;</div><div class="line">        mAsynchronous = async;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>从上面的源码可知在构造handler对象的时候，其内部会关联一个Looper对象。</p>
<ul>
<li>step3 handleMessage方法主要处理MessageQueue中Message。调用sendMessage方法最后都会辗转到对sendMessageAtTime的调用，其源码如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sendMessageAtTime</span><span class="params">(Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</div><div class="line">        MessageQueue queue = mQueue;</div><div class="line">        <span class="keyword">if</span> (queue == <span class="keyword">null</span>) &#123;</div><div class="line">            RuntimeException e = <span class="keyword">new</span> RuntimeException(</div><div class="line">                    <span class="keyword">this</span> + <span class="string">" sendMessageAtTime() called with no mQueue"</span>);</div><div class="line">            Log.w(<span class="string">"Looper"</span>, e.getMessage(), e);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> enqueueMessage(queue, msg, uptimeMillis);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>在sendMessageAtTime主要是将msg信息enqueue进队列中。</p>
<ul>
<li>step 4  Looper.loop()源码如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Looper me = myLooper();</div><div class="line">    <span class="keyword">if</span> (me == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No Looper; Looper.prepare() wasn't called on this thread."</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">final</span> MessageQueue queue = me.mQueue;</div><div class="line"></div><div class="line">    <span class="comment">// Make sure the identity of this thread is that of the local process,</span></div><div class="line">    <span class="comment">// and keep track of what that identity token actually is.</span></div><div class="line">    Binder.clearCallingIdentity();</div><div class="line">    <span class="keyword">final</span> <span class="keyword">long</span> ident = Binder.clearCallingIdentity();</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (;;) &#123;</div><div class="line">        Message msg = queue.next(); <span class="comment">// might block</span></div><div class="line">        <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// No message indicates that the message queue is quitting.</span></div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// This must be in a local variable, in case a UI event sets the logger</span></div><div class="line">        Printer logging = me.mLogging;</div><div class="line">        <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</div><div class="line">            logging.println(<span class="string">"&gt;&gt;&gt;&gt;&gt; Dispatching to "</span> + msg.target + <span class="string">" "</span> +</div><div class="line">                    msg.callback + <span class="string">": "</span> + msg.what);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        msg.target.dispatchMessage(msg);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</div><div class="line">            logging.println(<span class="string">"&lt;&lt;&lt;&lt;&lt; Finished to "</span> + msg.target + <span class="string">" "</span> + msg.callback);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Make sure that during the course of dispatching the</span></div><div class="line">        <span class="comment">// identity of the thread wasn't corrupted.</span></div><div class="line">        <span class="keyword">final</span> <span class="keyword">long</span> newIdent = Binder.clearCallingIdentity();</div><div class="line">        <span class="keyword">if</span> (ident != newIdent) &#123;</div><div class="line">            Log.wtf(TAG, <span class="string">"Thread identity changed from 0x"</span></div><div class="line">                    + Long.toHexString(ident) + <span class="string">" to 0x"</span></div><div class="line">                    + Long.toHexString(newIdent) + <span class="string">" while dispatching to "</span></div><div class="line">                    + msg.target.getClass().getName() + <span class="string">" "</span></div><div class="line">                    + msg.callback + <span class="string">" what="</span> + msg.what);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        msg.recycle();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，这个方法会进入了一个死循环，然后不断地调用的MessageQueue的next()方法。如果当前MessageQueue中存在mMessages(即待处理消息)，就将这个消息出队，然后让下一条消息成为mMessages，否则就进入一个阻塞状态，一直等到有新的消息入队。loop方法会调用 msg.target.dispatchMessage(msg)。看一下dispatchMessage方法的源码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">     <span class="keyword">if</span> (msg.callback != <span class="keyword">null</span>) &#123;<span class="comment">// Message中callback 是一个Runnable对象</span></div><div class="line">         handleCallback(msg);</div><div class="line">     &#125; <span class="keyword">else</span> &#123;</div><div class="line">         <span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;</div><div class="line">             <span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123;</div><div class="line">                 <span class="keyword">return</span>;</div><div class="line">             &#125;</div><div class="line">         &#125;</div><div class="line">         handleMessage(msg);</div><div class="line">     &#125;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> ps：</div><div class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handleCallback</span><span class="params">(Message message)</span> </span>&#123;</div><div class="line">     message.callback.run();</div><div class="line"> &#125; <span class="comment">// 如果msg为一个Runnable对象，则会直接调用Runnable的Run方法</span></div></pre></td></tr></table></figure>
<p>如果mCallback不为空，则调用mCallback的handleMessage()方法，否则直接调用Handler的handleMessage()方法，并将消息对象作为参数传递过去。</p>
<hr>
<p>小结：Handler负责发送和处理Message，MessageQueue负责管理Message。Looper负责监视MessageQueue状态并从Queue中取出Message交由Handler来处理它。</p>
<hr>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Markdown语法小记]]></title>
      <url>/2017/10/17/Markdown%E8%AF%AD%E6%B3%95%E5%B0%8F%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h1 id="段落、标题、区块代码"><a href="#段落、标题、区块代码" class="headerlink" title="段落、标题、区块代码"></a>段落、标题、区块代码</h1><p>一个以上的空行则会划分出不同的段落,一般的段落不需要用空白或者换行缩进。</p>
<p>Markdown的标题支持Setext 和atx形式的语法。Setex形式利用＝（最高节标题）和-(第二阶标题)；atx形式在行首插入１到６个＃，对应标题１到６阶。</p>
<p>区块引用则使用email形式的’&gt;’角括号。</p>
<h1 id="修辞和强调"><a href="#修辞和强调" class="headerlink" title="修辞和强调"></a>修辞和强调</h1><p>Markdown 使用星号（*强调内容*）和底线（_强调内容_）来标记需要强调的区段。</p>
<blockquote>
<ul>
<li>And I am not hip-hop and I just not <em>Eminem</em>.</li>
<li>And I am not hip-hop and I just not <em>Eminem</em>. </li>
</ul>
</blockquote>
<p>用两个 * 或 _ 包起来的话，则会产生加粗的效果。</p>
<h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>无序列表使用星号、加号和减号来做为列表的项目标记，这些符号是都可以使用的。<br>一般输出效果如下：</p>
<blockquote>
<ul>
<li>eminem</li>
<li>tupac</li>
<li>snop dogg</li>
</ul>
</blockquote>
<p>有序的列表则是使用一般的数字接着一个英文句点作为项目标记：</p>
<blockquote>
<ol>
<li>tupac</li>
<li>snop doggy</li>
<li>eminem</li>
</ol>
</blockquote>
<h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><p>Markdown 支援两种形式的链接语法： 行内 和 参考 两种形式，两种都是使用角括号来把文字转成连结。</p>
<p>行内形式是直接在后面用括号直接接上链接.</p>
<blockquote>
<p>U better lose Urself in the <a href="https://xianfeng92.github.io/" target="_blank" rel="external">github</a></p>
</blockquote>
<p>参考形式的链接让你可以为链接定一个名称，之后你可以在文件的其他地方定义该链接的内容：<br>如下形式定义：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">U better lose Urself <span class="keyword">in</span> the [github][1]</div><div class="line"></div><div class="line">[1]: https://xianfeng92.github.io/</div></pre></td></tr></table></figure></p>
<h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><p>图片的语法和链接很像。<br>行内形式（title 是选择性的）：</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![alt text](/path/to/img.jpg <span class="string">"Title"</span>)</div></pre></td></tr></table></figure>
<p>参考形式：</p>
<blockquote>
<p>![alt text][id]</p>
<p>[id]: /path/to/img.jpg “Title”</p>
</blockquote>
<h1 id="反斜杠"><a href="#反斜杠" class="headerlink" title="反斜杠"></a>反斜杠</h1><p>Markdown 利用反斜杠来插入一些在语法中有其它意义的符号。</p>
<h1 id="代码区域"><a href="#代码区域" class="headerlink" title="代码区域"></a>代码区域</h1><p>要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以。</p>
<h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。</p>
<hr>
]]></content>
      
        
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[单例模式]]></title>
      <url>/2017/10/17/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="1-Singleton-Pattern"><a href="#1-Singleton-Pattern" class="headerlink" title="1.Singleton Pattern"></a>1.Singleton Pattern</h1><p>单列指的是某一种类只有一个实例，而且自行实例化并向整个系统提供这个实例。有以下三个特点：</p>
<ul>
<li>自行实例化，该类的构造方法为private，外界对象无法通过new实例化。</li>
<li>提供了全局的访问方法供整个系统所使用。</li>
<li>整个系统中只会存在一个该类的实例。</li>
</ul>
<h2 id="1-1-饿汉式单例"><a href="#1-1-饿汉式单例" class="headerlink" title="1.1  饿汉式单例"></a>1.1  饿汉式单例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EagerSingleton</span> </span>&#123;   </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> EagerSingleton instance = <span class="keyword">new</span> EagerSingleton();   </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">EagerSingleton</span><span class="params">()</span> </span>&#123; &#125;   </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> EagerSingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> instance;   </div><div class="line">    &#125;     </div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>当类被加载时，静态变量instance会被初始化，此时类的私有构造函数会被调用，单例类的唯一实例将被创建。</p>
<h2 id="1-2懒汉式单例"><a href="#1-2懒汉式单例" class="headerlink" title="1.2懒汉式单例"></a>1.2懒汉式单例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LazySingleton</span> </span>&#123;   </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazySingleton instance = <span class="keyword">null</span>;   </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazySingleton</span><span class="params">()</span> </span>&#123; &#125;   </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">static</span> LazySingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123; <span class="comment">//使用synchronize确保多线程下的安全性  </span></div><div class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </div><div class="line">            instance = <span class="keyword">new</span> LazySingleton();   </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">return</span> instance;   </div><div class="line">    &#125;  </div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>懒汉式单例在第一次调用getInstance()方法时实例化，在类加载时并不自行实例化，这种技术又称为延迟加载(Lazy Load)技术，即需要的时候再加载实例。</p>
<ul>
<li>饿汉式单例类与懒汉式单例类比较：饿汉式单例在类被加载时就将自己实例化，故无需考虑多线程访问的问题，可以确保实例的唯一性；从调用速度和反应时间来说，由于单例对象从一开始就得以创建，因此要优于懒汉式单例。但是无论系统在运行时是否使用该单例对象，由于在类加载时该对象就需要创建，因此从资源利用效率角度，饿汉式不及懒汉式。而且系统加载时需要创建饿汉式单例对象，加载时间可能会比较长。懒汉式在第一次使用时创建，实现了延迟加载，但是必须处理好多线程访问的问题。无论是简单的加锁或是双重锁检查机制，都会对系统的性能产生一定影响。</li>
</ul>
<h2 id="1-3-双重检查锁定（Double-Check-Locking-DCL）"><a href="#1-3-双重检查锁定（Double-Check-Locking-DCL）" class="headerlink" title="1.3 双重检查锁定（Double-Check Locking,DCL）"></a>1.3 双重检查锁定（Double-Check Locking,DCL）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LazySingleton</span> </span>&#123;   </div><div class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> LazySingleton instance = <span class="keyword">null</span>; <span class="comment">//由于volatile关键字会屏蔽Java虚拟机所做的一些代码优化，可能会导致系统运行效率降低，因此即使使用双重检查锁定来实现单例模式也不是一种完美的实现方式。</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazySingleton</span><span class="params">()</span> </span>&#123; &#125;   </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazySingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;   </div><div class="line">        <span class="comment">//第一重判断  </span></div><div class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </div><div class="line">            <span class="comment">//锁定代码块  </span></div><div class="line">            <span class="keyword">synchronized</span> (LazySingleton.class) &#123;  </div><div class="line">                <span class="comment">//第二重判断  </span></div><div class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </div><div class="line">                    instance = <span class="keyword">new</span> LazySingleton(); <span class="comment">// 创建单例实例  </span></div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">return</span> instance;   </div><div class="line">      &#125;  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><a href="http://www.infoq.com/cn/articles/double-checked-locking-with-delay-initialization" target="_blank" rel="external">进一步了解双重检查锁定与延迟初始化</a></p>
<h2 id="1-4-一种更好的单例实现方法-Initialization-Demand-Holder-IoDH"><a href="#1-4-一种更好的单例实现方法-Initialization-Demand-Holder-IoDH" class="headerlink" title="1.4 一种更好的单例实现方法(Initialization Demand Holder,IoDH)"></a>1.4 一种更好的单例实现方法(Initialization Demand Holder,IoDH)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Initialization on Demand Holder  </span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123; &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">HolderClass</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton instance = <span class="keyword">new</span> Singleton();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> HolderClass.instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Design pattern </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python基础]]></title>
      <url>/2017/10/15/Python%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<p>闲着无聊,整理点python基础知识,顺便也当熟悉Markdown的语法规则.ps:今天才发现利用Chrome上的LiveReload+Subline Text,可以本地实时测试博客网页,爽歪歪呀.</p>
<h1 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h1><h2 id="1-Python有四种数据类型-分别为整数-长整数-浮点数以及复数"><a href="#1-Python有四种数据类型-分别为整数-长整数-浮点数以及复数" class="headerlink" title="1. Python有四种数据类型,分别为整数,长整数,浮点数以及复数"></a>1. Python有四种数据类型,分别为整数,长整数,浮点数以及复数</h2><h2 id="2-字符串"><a href="#2-字符串" class="headerlink" title="2. 字符串"></a>2. 字符串</h2><ul>
<li>python中的字符串可以用单引号或者双引号来表示</li>
<li>字符串前面加r或者R,如字符串r”see you again \n”,则\n会显示出来</li>
<li>对于“see” “you” “again”,python会将其自动转换为“see you again”</li>
<li>类似于Java,Python中字符串也是不可变的</li>
</ul>
<h2 id="3-对象"><a href="#3-对象" class="headerlink" title="3.对象"></a>3.对象</h2><p>python中Everything is object</p>
<h2 id="4-缩进"><a href="#4-缩进" class="headerlink" title="4.缩进"></a>4.缩进</h2><p>python使用4个空格来缩进代码.例如:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">def fun(n):</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</div><div class="line">    	<span class="built_in">print</span>(<span class="string">"the number of n ="</span>,n)</div></pre></td></tr></table></figure></p>
<h1 id="2-函数"><a href="#2-函数" class="headerlink" title="2.函数"></a>2.函数</h1><p>Python中使用def关键字定义函数,其格式为:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">def 函数名(参数列表): <span class="comment">#参数可为空</span></div><div class="line">    函数体</div></pre></td></tr></table></figure></p>
<h2 id="1-可变参数列表和默认参数"><a href="#1-可变参数列表和默认参数" class="headerlink" title="1.可变参数列表和默认参数"></a>1.可变参数列表和默认参数</h2><p>Python中可以定义可变参数的函数:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">def sum_all(*args):</div><div class="line">    sum = 0</div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> args:</div><div class="line">        sun += x</div><div class="line">    <span class="built_in">return</span> sum</div><div class="line"><span class="built_in">print</span>(sum_all(10,19,12) <span class="comment"># 输出 41</span></div><div class="line"><span class="built_in">print</span>(sum_all(19,1,3)) <span class="comment">#输出23</span></div><div class="line"></div><div class="line">def fun(a,b=9,c=8):</div><div class="line">    <span class="built_in">print</span>(a+b+c)</div><div class="line">fun(1) <span class="comment">#输出 18</span></div><div class="line">fun(1,2) <span class="comment">#输出 11</span></div><div class="line">fun(1,2,3) <span class="comment">#输出 6</span></div></pre></td></tr></table></figure></p>
<p>#3. 数据结构<br>Python中常见的三种数据结构:list,tuple,dict</p>
<h2 id="3-1-list"><a href="#3-1-list" class="headerlink" title="3.1 list"></a>3.1 list</h2><p>list是一种可变的有序列表,常见操作如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ L = [<span class="string">'love'</span>,<span class="string">'the'</span>,<span class="string">'way'</span>,<span class="string">'you'</span>,<span class="string">'lie'</span>]</div><div class="line">$ L2 = [<span class="string">'lose'</span>,<span class="string">'yourself'</span>]</div><div class="line">$ L.append9<span class="string">'Eminem'</span>) <span class="comment"># 在L列表后面添加一个字符串 Eminem 项</span></div><div class="line">$ L.extend(L2) <span class="comment"># 用给入的L2列表将L列表接长</span></div><div class="line">$ L2.insert(0,<span class="string">'Eminem'</span>) <span class="comment"># 在L2的第一个元素处插入Eminem</span></div><div class="line">$ L.remove(<span class="string">'lie'</span>) <span class="comment"># 移除L列表中第一个值为lie的元素</span></div><div class="line">$ L.pop(2) <span class="comment"># 删除L列表中第三个元素</span></div><div class="line">$ L.index(<span class="string">'love'</span>) <span class="comment"># 返回L列表中第一个值为love的索引</span></div><div class="line">$ L.count(“love”) <span class="comment"># 统计L列表中love出现的次数</span></div></pre></td></tr></table></figure></p>
<ul>
<li><p>list当作stack</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ stack = [<span class="string">'i'</span>,<span class="string">'need'</span>,<span class="string">'a'</span>,<span class="string">'doctor'</span>]</div><div class="line">$ stack.append(<span class="string">'tupac'</span>) <span class="comment"># push 'tupac' into stack</span></div><div class="line">$ stack,append(<span class="string">'eminem'</span>) <span class="comment"># push 'eminem' into satck</span></div><div class="line">$ stack.pop() <span class="comment"># pop the 'eminem' --------后进先出</span></div></pre></td></tr></table></figure>
</li>
<li><p>list当作queue<br>可以使用list来实现queue,queue特性是先入先出</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">未完......</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac系统上搭建hexo-github环境]]></title>
      <url>/2017/10/15/Mac%E7%B3%BB%E7%BB%9F%E4%B8%8A%E6%90%AD%E5%BB%BAhexo-github%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<h1 id="1-Hexo简介"><a href="#1-Hexo简介" class="headerlink" title="1. Hexo简介"></a>1. Hexo简介</h1><p>   Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：<br>     <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Node.js</div><div class="line">Git</div></pre></td></tr></table></figure></p>
<h1 id="2-nodejs和git的安装"><a href="#2-nodejs和git的安装" class="headerlink" title="2. nodejs和git的安装"></a>2. nodejs和git的安装</h1><p>   Node.js是一个能够在服务器端运行JavaScript的开放源代码、跨平台JavaScript运行环境。 Node.js 使用高效、轻量级的事件驱动、非阻塞 I/O)模型。它的包生态系统，npm，是目前世界上最大的开源库生态系统。我们可以直接从官网下载最新的nodejs 并安装（<a href="https://nodejs.org/zh-cn/" target="_blank" rel="external">https://nodejs.org/zh-cn/</a>).</p>
<p>   除此之外,在Mac上还可以通过使用 Homebrew 安装 Node.js，具体命令:<br>     <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ brew update</div><div class="line">$ brew install node</div></pre></td></tr></table></figure></p>
<p>   安装后，Terminal依次输入：<br>     <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ node -v  </div><div class="line">$ npm -v</div></pre></td></tr></table></figure></p>
<p>   来查看电脑上安装的版本号,确保其版本号为较新的，这样使用npm安装hexo才不会出现一系列问题。</p>
<p>   如果node为旧版本，可以通过Terminal：<br>     <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo npm install -g n <span class="comment"># 管理nodejs的版本</span></div><div class="line">$ sudo n latest <span class="comment"># 升级到最新版本</span></div><div class="line">$ sudo n stable <span class="comment"># 升级到稳定版</span></div></pre></td></tr></table></figure></p>
<p>   git的安装相对简单,在Mac上可以使用Homebrew来安装:<br>     <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install git</div></pre></td></tr></table></figure></p>
<h1 id="3-安装-Hexo"><a href="#3-安装-Hexo" class="headerlink" title="3. 安装 Hexo"></a>3. 安装 Hexo</h1><p>   所有必备的应用程序安装完成后，在终端依次输入并回车:</p>
<p>   Terminal:<br>     <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ mkdir hexo</div><div class="line">$ <span class="built_in">cd</span> /hexo</div><div class="line">$ npm install -g hexo-cli</div><div class="line">$ hexo init blog</div><div class="line">$ <span class="built_in">cd</span> blog</div><div class="line">$ npm install</div><div class="line">$ hexo g -d  <span class="comment"># 生成静态文件并部署博客到远端（比如github, heroku等平台）</span></div></pre></td></tr></table></figure></p>
<p>   打开浏览器，输入<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a> ，看到以下页面说明hexo环境安装成功。</p>
<p><img src="/2017/10/15/Mac系统上搭建hexo-github环境/localhost.jpg" alt=""></p>
<p>Ps.安装好了hexo以后,注册一个github账号,创建一个repo,将hexo和repo关联起来.最后效果图如下:</p>
<p><img src="/2017/10/15/Mac系统上搭建hexo-github环境/xianfeng.jpg" alt=""></p>
<h1 id="4-个性化Blog"><a href="#4-个性化Blog" class="headerlink" title="4. 个性化Blog"></a>4. 个性化Blog</h1><p>在Hexo中有两份主要的配置文件,其名称都为_config.yml.其中,一份位于站点根目录下,主要包含Hexo本身的配置(站点配置文件);另一份位于主题目录下,这份配置由主题作者提供,主要用于配置主题相关的选项(主题配置文件).</p>
<h2 id="1-Next主题"><a href="#1-Next主题" class="headerlink" title="1. Next主题"></a>1. Next主题</h2><p>Next主题的安装:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> your-hexo-site</div><div class="line">$ git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next theme</div></pre></td></tr></table></figure></p>
<p>然后在站点的配置文件中修改:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">theme: next</div></pre></td></tr></table></figure></p>
<h2 id="2-验证主题"><a href="#2-验证主题" class="headerlink" title="2.验证主题"></a>2.验证主题</h2><p>启动本地站点:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo c <span class="comment">#清除站点缓存</span></div><div class="line">$ hexo s</div></pre></td></tr></table></figure></p>
<p>当命令行输出一下信息表示站点正确运行:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</div></pre></td></tr></table></figure></p>
<h2 id="3-主题设定"><a href="#3-主题设定" class="headerlink" title="3.主题设定"></a>3.主题设定</h2><p>Scheme 是 NexT 提供的一种特性，借助于 Scheme，NexT 为你提供多种不同的外观。同时，几乎所有的配置都可以 在 Scheme 之间共用。目前 NexT 支持三种 Scheme，他们是：</p>
<ul>
<li>Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白.</li>
<li>Mist - Muse 的紧凑版本，整洁有序的单栏外观</li>
<li>Pisces - 双栏 Scheme，小家碧玉似的清新,小清新,我喜欢.</li>
</ul>
<p>关于博客的菜单,侧栏,站点描述等设置,可以参考:<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">http://theme-next.iissnan.com/getting-started.html</a></p>
<h3 id="1-头像设置"><a href="#1-头像设置" class="headerlink" title="1. 头像设置"></a>1. 头像设置</h3><p>博客怎能没有一个有个性的头像呢?然而头像设置让我在折腾了好久好久,周六晚上弄到半夜四点多,最惨的是还没有弄好~醉了.具体步骤如下:</p>
<ul>
<li>选择一个中意头像.如:love.jpg</li>
<li>打开主题配置文件_config.yml</li>
<li>找到如下信息,并进行配置:<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">custom_log:</div><div class="line">  enabled: ture </div><div class="line">  image: images/love.jpg <span class="comment"># 实际在image的love.jpg 要改为 avatar.gif.</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>不知道为啥要这样.</p>
<h3 id="2-blog中图片上传"><a href="#2-blog中图片上传" class="headerlink" title="2. blog中图片上传"></a>2. blog中图片上传</h3><ul>
<li>将主题配置文件_config.yml 里的post_asset_folder:这个选项设置为true<br>此时运行下面命令生成博客时:<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo n demo</div></pre></td></tr></table></figure>
</li>
</ul>
<p>在/source/_posts文件下除了demo.md,还会有一个demo文件夹</p>
<ul>
<li><p>在博客的根目录下:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-asset-image --save <span class="comment"># 有点慢,耐心等待</span></div></pre></td></tr></table></figure>
</li>
<li><p>在demo.md中想要引入love.jpg图片时,只需要将love.jpg放到demo文件夹下,然后demo.md中写:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![你想输入的替代文字](love.jpg)</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/10/12/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
